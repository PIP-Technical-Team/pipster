% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pipgd_dist.R
\name{pipgd_polarization}
\alias{pipgd_polarization}
\title{Compute polarization index}
\usage{
pipgd_polarization(
  params = NULL,
  welfare = NULL,
  weight = NULL,
  mean = 1,
  gini = NULL,
  complete = getOption("pipster.return_complete"),
  lorenz = NULL
)
}
\arguments{
\item{params}{list of parameters from \code{pipgd_validate_lorenz()}}

\item{welfare}{numeric vector of cumulative share of welfare (income/consumption)}

\item{weight}{numeric vector of cumulative share of the population}

\item{mean}{numeric scalar of distribution mean. Default is 1}

\item{gini}{numeric scalar of gini index, from \code{pipgd_gini()} or user supplied}

\item{complete}{logical: If TRUE, returns a list a cumulative returns from
previously used \code{get_gd} functions. Default is \code{FALSE}}

\item{lorenz}{character or NULL. Lorenz curve selected. It could be "lq" for
Lorenz Quadratic or "lb" for Lorenz Beta}
}
\value{
Returns a nested list containing:
\verb{$dist_stats$polarization} a numeric vector containing the index of polarization of the distribution;
\verb{$dist_stats$lorenz} a character vector specifying which Lorenz curve is used.
If \code{complete = TRUE}, it returns a \code{pipgd_params} object with additional
details and intermediate calculations.
}
\description{
This function computes polarization index of the distribution (for grouped data)
}
\examples{
# Example with welfare and weight vectors
pipgd_polarization(welfare = pip_gd$L,
                   weight  = pip_gd$P)

# Example with list of params
# Params from `pipgd_select_lorenz()`
params = pipgd_select_lorenz(welfare  = pip_gd$L,
                             weight   = pip_gd$P,
                             complete = TRUE)
pipgd_polarization(params = params)

# Example with a specific Lorenz
pipgd_polarization(welfare = pip_gd$L,
                   weight  = pip_gd$P,
                   lorenz  = "lb")

# Example with complete output
pipgd_polarization(welfare  = pip_gd$L,
                   weight   = pip_gd$P,
                   complete = TRUE)

}
